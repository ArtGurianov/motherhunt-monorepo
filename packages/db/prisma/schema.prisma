generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                        String      @id @default(auto()) @map("_id") @db.ObjectId
  name                      String
  email                     String
  emailVerified             Boolean
  isNewsletterEmailsEnabled Boolean     @default(true)
  isSystemEmailsEnabled     Boolean     @default(true)
  image                     String?
  role                      AppRole?    @default(SCOUTER_ROLE)     
  banned                    Boolean?
  banReason                 String?
  banExpires                String?
  recentOrganizationId      String?     @db.ObjectId
  recentOrganizationName    String?
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
  sessions                  Session[]
  accounts                  Account[]
  lots                      Lot[]

  @@unique([email])
  @@map("user")
}

model Session {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  expiresAt              DateTime
  token                  String
  impersonatedBy         String?  @db.ObjectId
  activeOrganizationId   String?  @db.ObjectId
  activeMemberId         String?  @db.ObjectId
  activeOrganizationName String?
  activeOrganizationRole String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  ipAddress              String?
  userAgent              String?
  userId                 String   @db.ObjectId
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  accountId             String
  providerId            String
  userId                String    @db.ObjectId
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("verification")
}

model Organization {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String
  logo      String?
  metadata  String?
  createdAt DateTime @default(now())

  @@map("organization")
}

model Member {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  organizationId String   @db.ObjectId
  role           String
  createdAt      DateTime @default(now())

  @@map("member")
}

model Invitation {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  email          String
  inviterId      String   @db.ObjectId
  organizationId String   @db.ObjectId
  role           String
  status         String
  expiresAt      DateTime
  createdAt      DateTime @default(now())

  @@map("invitation")
}


model Lot {
  id                        String      @id @default(auto()) @map("_id") @db.ObjectId
  scouterId                 String      @db.ObjectId
  scouter                   User        @relation(fields: [scouterId], references: [id], onDelete: NoAction)
  name                      String?
  email                     String?
  isAgreementSigned         Boolean     @default(false)
  isOnChain                 Boolean     @default(false)
  profilePictureUrl         String?    
  banned                    Boolean?
  banReason                 String?
  banExpires                String?
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt

  @@map("lot")
}

enum AppRole {
  MYDAOGS_ADMIN_ROLE
  PROJECT_SUPERADMIN_ROLE
  PROJECT_ADMIN_ROLE
  SCOUTER_ROLE
}
